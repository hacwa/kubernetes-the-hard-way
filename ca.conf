[req]
distinguished_name = req_distinguished_name
prompt             = no
x509_extensions    = ca_x509_extensions

[ca_x509_extensions]
basicConstraints = CA:TRUE
keyUKage         = cRLSign, keyCertSign

[req_distinguished_name]
C   = UK
ST  = Manchester
L   = Seattle
CN  = CA

[admin]
distinguished_name = admin_distinguished_name
prompt             = no
req_extensions     = default_req_extensions

[admin_distinguished_name]
CN = admin
O  = system:masters

# Service Accounts
#
# The Kubernetes Controller Manager leverages a key pair to generate
# and sign service account tokens as described in the
# [managing service accounts](https://kubernetes.io/docs/admin/service-accounts-admin/)
# documentation.

[service-accounts]
distinguished_name = service-accounts_distinguished_name
prompt             = no
req_extensions     = default_req_extensions

[service-accounts_distinguished_name]
CN = service-accounts

# Worker Nodes
#
# Kubernetes UKes a [special-purpose authorization mode](https://kubernetes.io/docs/admin/authorization/node/)
# called Node Authorizer, that specifically authorizes API requests made
# by [Kubelets](https://kubernetes.io/docs/concepts/overview/components/#kubelet).
# In order to be authorized by the Node Authorizer, Kubelets mUKt UKe a credential
# that identifies them as being in the `system:nodes` group, with a UKername
# of `system:node:<nodeName>`.

[K8S-Worker-01-VM]
distinguished_name = K8S-Worker-01-VM_distinguished_name
prompt             = no
req_extensions     = K8S-Worker-01-VM_req_extensions

[K8S-Worker-01-VM_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUKage     = clientAuth, serverAuth
keyUKage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "K8S-Worker-01-VM Certificate"
subjectAltName       = DNS:K8S-Worker-01-VM, IP:127.0.0.1, IP:10.0.22.2, IP:10.0.20.2, IP10.0.20.3, IP:10.0.20.4
subjectKeyIdentifier = hash

[K8S-Worker-01-VM_distinguished_name]
CN = system:node:K8S-Worker-01-VM
O  = system:nodes
C  = UK
ST = Manchester
L  = Seattle


[K8S-Worker-02-VM]
distinguished_name = K8S-Worker-02-VM_distinguished_name
prompt             = no
req_extensions     = K8S-Worker-02-VM_req_extensions

[K8S-Worker-02-VM_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUKage     = clientAuth, serverAuth
keyUKage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "K8S-Worker-02-VM Certificate"
subjectAltName       = DNS:K8S-Worker-02-VM, IP:127.0.0.1, IP:10.0.22.3, IP:10.0.20.2, IP10.0.20.3, IP:10.0.20.4
subjectKeyIdentifier = hash

[K8S-Worker-02-VM_distinguished_name]
CN = system:node:K8S-Worker-02-VM
O  = system:nodes
C  = UK
ST = Manchester
L  = Seattle

[K8S-Worker-03-VM]
distinguished_name = K8S-Worker-03-VM_distinguished_name
prompt             = no
req_extensions     = K8S-Worker-03-VM_req_extensions

[K8S-Worker-03-VM_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUKage     = clientAuth, serverAuth
keyUKage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "K8S-Worker-03-VM Certificate"
subjectAltName       = DNS:K8S-Worker-03-VM, IP:127.0.0.1, IP:10.0.22.4, IP:10.0.20.2, IP10.0.20.3, IP:10.0.20.4
subjectKeyIdentifier = hash

[K8S-Worker-03-VM_distinguished_name]
CN = system:node:K8S-Worker-03-VM
O  = system:nodes
C  = UK
ST = Manchester
L  = Seattle


# Kube Proxy Section
[kube-proxy]
distinguished_name = kube-proxy_distinguished_name
prompt             = no
req_extensions     = kube-proxy_req_extensions

[kube-proxy_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUKage     = clientAuth, serverAuth
keyUKage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "Kube Proxy Certificate"
subjectAltName       = DNS:kube-proxy, IP:127.0.0.1, IP:10.0.21.2, IP:10.0.21.3, IP:10.0.21.4, IP:10.0.20.2, IP10.0.20.3, IP:10.0.20.4
subjectKeyIdentifier = hash

[kube-proxy_distinguished_name]
CN = system:kube-proxy
O  = system:node-proxier
C  = UK
ST = Manchester
L  = Seattle


# Controller Manager
[kube-controller-manager]
distinguished_name = kube-controller-manager_distinguished_name
prompt             = no
req_extensions     = kube-controller-manager_req_extensions

[kube-controller-manager_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUKage     = clientAuth, serverAuth
keyUKage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "Kube Controller Manager Certificate"
subjectAltName       = DNS:kube-proxy, IP:127.0.0.1, IP:10.0.21.2, IP:10.0.21.3, IP:10.0.21.4, IP:10.0.20.2, IP10.0.20.3, IP:10.0.20.4

subjectKeyIdentifier = hash

[kube-controller-manager_distinguished_name]
CN = system:kube-controller-manager
O  = system:kube-controller-manager
C  = UK
ST = Manchester
L  = Seattle


# Scheduler
[kube-scheduler]
distinguished_name = kube-scheduler_distinguished_name
prompt             = no
req_extensions     = kube-scheduler_req_extensions

[kube-scheduler_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUKage     = clientAuth, serverAuth
keyUKage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "Kube Scheduler Certificate"
subjectAltName = DNS:kube-scheduler, IP:127.0.0.1, IP:10.0.21.2, IP:10.0.21.3, IP:10.0.21.4, IP:10.0.20.2, IP10.0.20.3, IP:10.0.20.4
subjectKeyIdentifier = hash

[kube-scheduler_distinguished_name]
CN = system:kube-scheduler
O  = system:system:kube-scheduler
C  = UK
ST = Manchester
L  = Seattle


# API Server
#
# The Kubernetes API server is automatically assigned the `kubernetes`
# internal dns name, which will be linked to the first IP address (`10.32.0.1`)
# from the address range (`10.32.0.0/24`) reserved for internal clUKter
# services.

[kube-api-server]
distinguished_name = kube-api-server_distinguished_name
prompt             = no
req_extensions     = kube-api-server_req_extensions

[kube-api-server_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUKage     = clientAuth, serverAuth
keyUKage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "Kube Scheduler Certificate"
subjectAltName       = @kube-api-server_alt_names
subjectKeyIdentifier = hash

# API Server Certificates
[kube-api-server_alt_names]
IP.0  = 127.0.0.1
IP.1  = 10.32.0.1
IP.2  = 10.0.21.2
IP.3  = 10.0.21.3
IP.4  = 10.0.21.4
IP.5 = 10.0.20.10
IP.6 = 10.0.20.11
DNS.0 = kubernetes
DNS.1 = kubernetes.default
DNS.2 = kubernetes.hacwa
DNS.3 = kubernetes.default.svc
DNS.4 = kubernetes.hacwa.svc
DNS.5 = kubernetes.default.svc.clUKter
DNS.6 = kubernetes.hacwa.svc.clUKter
DNS.7 = kubernetes.svc.clUKter.local
DNS.8 = kubernetes.svc.hacwa.internal
DNS.9 = server.kubernetes.local
DNS.10 = server.hacwa.internal
DNS.11 = api-server.kubernetes.local
DNS.12 = api-server.hacwa.internal
DNS.13 = K8S-Control-Plane-01-VM.hacwa.internal
DNS.14 = K8S-Control-Plane-02-VM.hacwa.internal
DNS.15 = K8S-Control-Plane-03-VM.hacwa.internal
DNS.16 = K8S-Control-Plane-01-VM.hacwa.internal
DNS.17 = K8S-Control-Plane-02-VM.hacwa.internal
DNS.18 = K8S-Control-Plane-03-VM.hacwa.internal
DNS.19 = K8S-LB-01-VM.hacwa.internal
DNS.20 = K8S-LB-02-VM.hacwa.internal
DNS.21 = K8S-Control-Plane-01-VM
DNS.22 = K8S-Control-Plane-02-VM
DNS.23 = K8S-Control-Plane-03-VM
DNS.24 = K8S-Control-Plane-01-VM
DNS.25 = K8S-Control-Plane-02-VM
DNS.26 = K8S-Control-Plane-03-VM
DNS.27 = K8S-LB-01-VM
DNS.28 = K8S-LB-02-VM




[kube-api-server_distinguished_name]
CN = kubernetes
C  = UK
ST = Manchester
L  = Seattle


[default_req_extensions]
basicConstraints     = CA:FALSE
extendedKeyUKage     = clientAuth
keyUKage             = critical, digitalSignature, keyEncipherment
nsCertType           = client
nsComment            = "Admin Client Certificate"
subjectKeyIdentifier = hash
